#设置Cmake最低版本
cmake_minimum_required(VERSION 3.22.1)

project(
    CmakeTemplate
    VERSION 0.0.1
    DESCRIPTION "Cmake样例"
    HOMEPAGE_URL "www.baidu.com"
    LANGUAGES CXX C)

# 开启CTest
enable_testing()

#打印系统信息
message(STATUS "system info: " ${CMAKE_SYSTEM})    

# 语言标准为c++17
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED true)
message(STATUS "Cpp language standard: " ${CMAKE_CXX_STANDARD})

#建议关闭，能有效避免编译期间某些编译选项或预编译文件造成的冲突(例如 -Wpedantic)
set(CMAKE_CXX_EXTENSIONS OFF)

#设置编译选项
set(CMAKE_BUILD_TYPE "Debug")

if(unix)
    set(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
    set(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
endif()

# 不开启无法使用FOLDER
set_property(GLOBAL PROPERTY USE_FOLDERS ON)

#设置链接库目录
set(PROJECT_LIBS_DIR ${CMAKE_BINARY_DIR}/lib)
set(PROJECT_OUTPUT_DIR ${CMAKE_BINARY_DIR}/bin)

message(STATUS "PROJECT_LIBS_DIR: " ${PROJECT_LIBS_DIR})
message(STATUS "PROJECT_OUTPUT_DIR: " ${PROJECT_OUTPUT_DIR})

link_directories(${PROJECT_LIBS_DIR})

include_directories(${CMAKE_CURRENT_SOURCE_DIR}/modules/log)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/modules/math)
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/ThirdParty/vld/include)

add_subdirectory(modules)
add_subdirectory(src)
add_subdirectory(ThirdParty)
add_subdirectory(test)

#构建一个CPack安装包
include(InstallRequiredSystemLibraries)

if(WIN32)
    set(CPACK_GENERATOR WIX)
endif()

set(CPACK_PACKAGE_NAME "${CMAKE_PROJECT_NAME}")
set(CPACK_PACKAGE_VENDOR "CMake.org")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "CPack Component Installation Example")
set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE")
set(CPACK_PACKAGE_VERSION "${CMAKE_PROJECT_VERSION}")
set(CPACK_PACKAGE_VERSION_MAJOR "${CMAKE_PROJECT_VERSION_MAJOR}")
set(CPACK_PACKAGE_VERSION_MINOR "${CMAKE_PROJECT_VERSION_MINOR}")
set(CPACK_PACKAGE_VERSION_PATCH "${CMAKE_PROJECT_VERSION_PATCH}")
include(CPack)

# 打包程序指令
# cpack -C CPackConfig.cmake

find_program(CMAKE_CXX_CPPCHECK cppcheck NAMES cppcheck HINTS $ENV{PROGRAMFILES}/cppcheck)
if(CMAKE_CXX_CPPCHECK)
    # Check CppCheck version
    set(CPP_CHECK_CMD ${CMAKE_CXX_CPPCHECK} --version)
    execute_process(COMMAND ${CPP_CHECK_CMD}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        RESULT_VARIABLE CPP_CHECK_RESULT
        OUTPUT_VARIABLE CPP_CHECK_VERSION
        ERROR_VARIABLE CPP_CHECK_ERROR)
    
    # Check if version could be extracted
    if(CPP_CHECK_RESULT EQUAL 0)
      # Get number of CPU cores
      include(ProcessorCount)
      ProcessorCount(CPU_CORES)

      # Append desired arguments to CppCheck
      list(
        APPEND CMAKE_CXX_CPPCHECK
          "-iThirdParty"  

          # Using the below template will allow jumping to any found error from inside Visual Studio output window by double click
          "--template \"${CMAKE_SOURCE_DIR}/{file}({line}): {severity} ({id}): {message}\"" 
          
          # Use all the available CPU cores
          "-j ${CPU_CORES}" 
          
          # Only show found errors
          "--quiet" 
          
          # Desired warning level in CppCheck
          "--enable=style"
          
          # Optional: suppression file stored in same directory as the top level CMake script
          "--suppressions-list=${CMAKE_SOURCE_DIR}/cppcheck_suppressions.txt"
          
          # Optional: Use inline suppressions
          "--inline-suppr"
          
          # Run CppCheck from the working directory, as specified in the add_custom_target command below
          "."
        )
        add_custom_target(ANALYZE_CPPCHECK DEPENDS CmakeTemplate
            COMMAND ${CMAKE_CXX_CPPCHECK}
            WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
            COMMENT "Static code analysis using ${CPP_CHECK_VERSION}"
        )
    endif()
else()
    message(ERROR "could not find CppCheck program")
endif()